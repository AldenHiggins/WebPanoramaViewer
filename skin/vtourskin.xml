<krpano>
	<!-- Kilograph Virtual Tour Skin -->

	<!-- Load in all of the plugins we'll be using -->
	<include url="%SWFPATH%/skin/plugins/youtube-player.xml" />
	<include url="%SWFPATH%/skin/plugins/swipe_gallery.xml" />
	<include url="%SWFPATH%/skin/plugins/loadinganimation.xml" />
	<include url="%SWFPATH%/plugins/webvr.xml" devices="html5" />
	<plugin name="skin_gyro" keep="true" url="" html5_url="%SWFPATH%/plugins/gyro2.js" devices="html5" enabled="false" onavailable="skin_arrange_buttons();" />

	<!-- Load in the webVR settings -->
	<include url="%SWFPATH%/skin/webVRSettings.xml" devices="html5" />

	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings 
		gyro="true"
		webvr="true"
		title="true"
		thumbs="true"
		thumbs_width="120" 
		thumbs_height="80"
		thumbs_padding="10"
		thumbs_crop="0|40|240|160"
		thumbs_opened="false"
		thumbs_text="false"
		thumbs_dragging="true"
		thumbs_onhoverscrolling="false"
		thumbs_scrollbuttons="false"
		thumbs_scrollindicator="false"
		thumbs_loop="false"
		tooltips_buttons="false"
		tooltips_thumbs="false"
		tooltips_hotspots="false"
		loadscene_flags="MERGE"
		loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
		loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
		loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
		layout_width="100%"
		layout_maxwidth="2000"
		controlbar_width="-24"
		controlbar_height="40"
		controlbar_offset="20"
		controlbar_offset_closed="-40"
		controlbar_overlap.no-fractionalscaling="10"
		controlbar_overlap.fractionalscaling="0"
		design_skin_images="vtourskin.png"
		design_bgcolor="0x2D3E50"
		design_bgalpha="0.8"
		design_bgborder="0"
		design_bgroundedge="1"
		design_bgshadow="0 4 10 0x000000 0.3"
		design_thumbborder_bgborder="3 0xFFFFFF 1.0"
		design_thumbborder_padding="2"
		design_thumbborder_bgroundedge="0"
		design_text_css="color:#FFFFFF; font-family:Arial;"
		design_text_shadow="1"
    />

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////   MISC SETUP  //////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />

	<!-- mouse / touch / keyboard(button) control settings - http://krpano.com/docu/xml/#control -->
	<control 
		mouse="drag"
		touch="drag"
		zoomtocursor="false"
		zoomoutcursor="false"
		draginertia="0.1"
		dragfriction="0.9"
		movetoaccelerate="1.0"
		movetospeed="10.0"
		movetofriction="0.8"
		keybaccelerate="0.09"
		keybfriction="0.94"
		keybfovchange="0.25"
		mousefovchange="1.0"
		fovspeed="3.0"
		fovfriction="0.9"
		bouncinglimits="true"
     />

	<!-- mouse cursors - http://krpano.com/docu/xml/#cursors -->
	<cursors 
		standard="default"
		dragging="move"
		moving="move"
    />

	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />

	<!-- Context Menu (basically just disable it) -->
	<contextmenu fullscreen="false" versioninfo="hide"></contextmenu>
	<events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
	<action name="updateContextMenu"></action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////	STYLES   ///////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="calc:vtourskinxmlpath.url + skin_settings.design_skin_images" />

	<!-- skin_glow - button glowing (if additional ondown,onup,onout,over events are needed, this style provides ondown2,onup2,onover2,onout2 events) -->
	<style 
		name="skin_glow"
		ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
		onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() );"
		onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"
		onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
   />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style 
		name="skin_thumbtext_style"
		url="%SWFPATH%/plugins/textfield.swf"
		align="bottom"
		width="100%"
		autoheight="true"
		y="5"
		enabled="false"
		background="false"
		border="false"
		css="calc:skin_settings.design_text_css + ' text-align:center; font-size:10px;'" 
		textshadow="get:skin_settings.design_text_shadow" 
	/>

	<!-- skin_hotspotstyle - style for the hotspots -->
	<style 
		name="skin_hotspotstyle" 
		url="vtourskin_hotspot.png"
		scale="0.5"
		edge="top"
		distorted="true"
		tooltip=""
		onclick="if(linkedscene, set(enabled,false); skin_hidetooltips(); tween(depth|alpha|oy|rx, 4000|0.0|-50|-60, 0.5, default, loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); ); );"
		onover="tween(scale,0.55);"
		onout="tween(scale,0.5);"
		onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
    />

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style 
		name="skin_tooltips"
		onover.mouse="copy(layer[skin_tooltip].html, tooltip);
		             set(layer[skin_tooltip].visible, true);
		             tween(layer[skin_tooltip].alpha, 1.0, 0.1);
		             asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
        onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

	<!-- the tooltip textfield -->
	<layer 
		name="skin_tooltip" 
		keep="true"
		url="%SWFPATH%/plugins/textfield.swf"
		parent="STAGE"
		visible="false" 
		alpha="0"
		enabled="false"
		align="lefttop"
		edge="bottom"
		oy="-2"
		width="200"
		autoheight="true"
		background="false"
		backgroundcolor="0xFFFFFF"
		backgroundalpha="1.0"
		border="false"
		bordercolor="0x000000"
		borderalpha="1.0"
		borderwidth="1.0"
		roundedge="0"
		shadow="0.0"
		shadowrange="4.0"
		shadowangle="45"
		shadowcolor="0x000000"
		shadowalpha="1.0"
		textshadow="get:skin_settings.design_text_shadow"
		textshadowrange="6.0"
		textshadowangle="90"
		textshadowcolor="0x000000"
		textshadowalpha="1.0"
		css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px;'"
		html=""
    />

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////   BUTTON LAYOUT   ///////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->
	<layer name="skin_layer" keep="true" type="container" align="top" width="get:skin_settings.layout_width" maxwidth="get:skin_settings.layout_maxwidth" height="100%" maskchildren="true" visible="false" bgcapture="false" zorder="1">
		<!-- Top part of control bar that scrolls up -->
		<layer name="skin_scroll_window" type="container" align="bottom" width="100%" height="100%" x="0" y="calc:skin_settings.controlbar_offset + skin_settings.controlbar_height - skin_settings.controlbar_overlap" maskchildren="true" onloaded="skin_calc_opened_closed();" zorder="1">
			<layer name="skin_scroll_layer" type="container" align="bottom" width="get:skin_settings.controlbar_width" height="100%" x="0" y="200" y_offset="get:skin_settings.controlbar_overlap" accuracy="1" bgalpha="get:skin_settings.design_bgalpha" bgcolor="get:skin_settings.design_bgcolor" bgborder="get:skin_settings.design_bgborder" bgroundedge="get:skin_settings.design_bgroundedge" bgshadow="get:skin_settings.design_bgshadow">
				<!-- Title of the scene -->
				<layer name="skin_title" url="%SWFPATH%/plugins/textfield.swf" align="lefttop" edge="leftbottom" x="4" y="0" zorder="4" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:left; font-style:italic; font-size:12px;'" textshadow="get:skin_settings.design_text_shadow" visible="false" />

				<!-- Buttons/Logos above the control bar -->
				<layer name="skin_logo"      url="%SWFPATH%/skin/KilographIcon.png" align="lefttop"   zorder="6"  visible="true"   x="0"    y="-80"  scale="0.2" alpha="0.7" />
				<layer name="skin_gallery_picture"      url="%SWFPATH%/skin/GalleryPicture.png" align="lefttop" zorder="6" visible="true"      x="60"    y="-80"  scale="0.1" alpha="0.7" />

				<!-- Contains the layers that pop up over the control bar -->
				<layer name="skin_scroll_container" type="container" align="lefttop" width="100%" height="100%" x="0" y="0" bgroundedge="get:skin_settings.design_bgroundedge" maskchildren="true">
					<!-- Scene Thumbnails -->
					<layer name="skin_thumbs_container" type="container" align="lefttop" width="100%" height="100%" visible="false">
						<layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
						<layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
						<layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="2" visible="false" enabled="false" />
						<layer name="skin_thumbs" state="closed" url.flash="%SWFPATH%/plugins/scrollarea.swf" url.html5="%SWFPATH%/plugins/scrollarea.js" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
					</layer>
				</layer>
			</layer>
		</layer>

		<!-- Bottom part of control bar background -->
		<layer name="skin_splitter_bottom" type="container" align="bottom" width="100%" height="calc:skin_settings.controlbar_offset + skin_settings.controlbar_height - skin_settings.controlbar_overlap" y="0" maskchildren="true" onloaded="skin_calc_opened_closed();" zorder="2">
			<layer name="skin_control_bar_bg" type="container" align="bottom" width="get:skin_settings.controlbar_width" height="calc:skin_settings.controlbar_height + skin_settings.controlbar_overlap" x="0" y="get:skin_settings.controlbar_offset" bgcolor="get:skin_settings.design_bgcolor" bgalpha="get:skin_settings.design_bgalpha" bgborder="get:skin_settings.design_bgborder" bgroundedge="get:skin_settings.design_bgroundedge" bgshadow="get:skin_settings.design_bgshadow" />
		</layer>

		<!-- Main bar buttons -->
		<layer name="skin_control_bar" type="container" align="bottom" width="get:skin_settings.controlbar_width" height="calc:skin_settings.controlbar_height" x="0" y="get:skin_settings.controlbar_offset" onloaded="skin_calc_opened_closed();" zorder="3">
			<layer name="skin_control_bar_buttons" type="container" align="leftbottom" width="100%" height="get:skin_settings.controlbar_height">
				<layer name="skin_btn_prev"      style="skin_base|skin_glow" crop="0|64|64|64"   align="left"        x="5"    y="0"  scale="0.5" alpha="0.5"  onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(-1), skin_nextscene(-1) );" />

				<layer name="skin_btn_thumbs"    style="skin_base|skin_glow" crop="0|128|64|64"  align="left"        x="50"   y="0"  scale="0.5" ondown2="skin_showthumbs();" />

				<layer name="skin_btn_gyro"      style="skin_base|skin_glow" crop="0|384|64|64"  align="center"      x="+20" y="0"  scale="0.5" onclick="switch(plugin[skin_gyro].enabled);" visible="false" devices="html5" />

				<layer name="skin_btn_vr"        style="skin_base|skin_glow" crop="0|0|80|64"    align="center"      x="0" y="0"  scale="0.5" onclick="webvr.enterVR();" visible="false" />

				<layer name="skin_btn_home"        style="skin_base|skin_glow" crop="0|192|64|64"    align="center"      x="0" y="0"  scale="0.5" onclick="loadscene(scene_pano)" visible="true" />

				<layer name="skin_btn_fs"        style="skin_base|skin_glow" crop="0|576|64|64"  align="right"       x="90"   y="0"  scale="0.5" onclick="switch(fullscreen);" devices="fullscreensupport" />

				<layer name="skin_btn_hide"      style="skin_base|skin_glow" crop="0|448|64|64"  align="right"       x="50"   y="0"  scale="0.5" onclick="skin_hideskin()" />

				<layer name="skin_btn_show" type="container" bgcapture="true" align="bottom" width="100%" height="get:skin_settings.controlbar_height" y="calc:skin_settings.controlbar_height - skin_settings.controlbar_offset_closed" onclick="skin_showskin()" onhover="tween(alpha,1.0);" onout="tween(alpha,0.25);" ondown.touch="onhover();" onup.touch="onout();" visible="false" capture="false" alpha="0.0">
					<layer name="skin_btn_show_icon" style="skin_base" crop="64|448|64|64" scale="0.5" align="bottom" y="2" enabled="false" />
				</layer>

				<layer name="skin_btn_next"      style="skin_base|skin_glow" crop="64|64|64|64"  align="right"       x="5"    y="0"   scale="0.5" alpha="0.5"  onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );" />
			</layer>
		</layer>

		<layer name="skin_buttonglow"  style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" scale="1.0" alpha="0.0" visible="false" enabled="false" />
		<layer name="skin_thumbborder" type="container" x="get:skin_settings.design_thumbborder_padding" y="get:skin_settings.design_thumbborder_padding" width="calc:skin_settings.thumbs_width - 2*skin_settings.design_thumbborder_padding" height="calc:skin_settings.thumbs_height - 2*skin_settings.design_thumbborder_padding" visible="false" enabled="false" align="lefttop" bgborder="get:skin_settings.design_thumbborder_bgborder" bgroundedge="get:skin_settings.design_thumbborder_bgroundedge" />
	</layer>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////   IMAGE GALLERY   ///////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->
    <layer name="gallery" type="container" align="center" width="80%" height="80%" alpha="0" autoalpha="true" bgcolor="0x000000" bgalpha="0.8" keep="true">
		<layer name="gallery_scrollarea" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" keep="true" align="left" width="0" height="100%" zorder="1" direction="h" ondown="set(gallery_scrollarea_start_pos, get(x))">
		</layer>
		<layer name="arrow_left"  align="left"  x="10" keep="true" visible="false" zorder="2" onclick="move_image(left)" url="%SWFPATH%/skin/arrow_left.png"  />
		<layer name="arrow_right" align="right" x="10" keep="true" visible="false" zorder="2" onclick="move_image(right)" url="%SWFPATH%/skin/arrow_right.png" />
		<layer name="gallery_close" align="righttop" x="10" y="10" keep="true" zorder="2" onclick="hide_gallery()" url="%SWFPATH%/skin/close.png" />
	</layer>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////    SKIN EVENTS    ///////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->
	<events 
		name="skin_events" keep="true"
		onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
		onnewpano="skin_showloading(true); skin_update_scene_infos();"
		onremovepano="skin_showloading(true);"
		onloadcomplete="skin_showloading(false);"
		onresize="skin_onresize();"
		onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
		onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
    />

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////    SKIN ACTIONS    ///////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_startup">
		if(skin_settings.thumbs
			,
			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
			if(skin_settings.thumbs_onhoverscrolling AND device.mouse
				,
				set(layer[skin_thumbs].draggable, false);
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			);
		);

		if(skin_settings.gyro AND !device.desktop AND device.html5
			,
			copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
		);

		if(skin_settings.webvr AND device.html5 AND device.webgl
			,
			copy(plugin[WebVR].url, plugin[WebVR].pluginurl);
		);

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		set(layer[skin_layer].visible, true);
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////   RESIZE ACTIONS   //////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_onresize">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		add(mh, layer[skin_scroll_layer].y_offset);
		set(layer[skin_scroll_layer].y, get(mh));
		skin_arrange_buttons();
	</action>

	<!-- determine the visibility of the buttons and calculate their positions -->
	<action name="skin_arrange_buttons">
		calc(show_selbuttons, scene.count GT 1);
		calc(show_thumbutton, skin_settings.thumbs == true);
		calc(show_gyrobutton, plugin[skin_gyro].available == true AND view.vlookatrange == 180 );
		calc(show_vrbutton,   webvr.isavailable == true);
		if (device.desktop, calc(show_vrbutton, false););
		if (device.tablet, calc(show_vrbutton, false););
		calc(show_fsbutton,   device.fullscreensupport == true);

		set(lpos,6);
		set(cpos,0);
		if(show_gyrobutton, dec(cpos,20));
		if(show_vrbutton, dec(cpos,24));
		set(rpos,6);

		copy(layer[skin_btn_prev].visible, show_selbuttons);
		copy(layer[skin_btn_next].visible, show_selbuttons);
		if(show_selbuttons, inc(lpos,44); inc(rpos,44); );

		copy(layer[skin_btn_thumbs].visible, show_thumbutton);
		copy(layer[skin_btn_thumbs].x, lpos);
		if(show_thumbutton, inc(lpos,40));

		if(device.desktop
			,
			set(layer[skin_btn_gyro].align, center);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, cpos);
			if(show_gyrobutton, inc(cpos,48));

			set(layer[skin_btn_vr].align, center);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, cpos);
			if(show_vrbutton, inc(cpos,80));
			,
			set(layer[skin_btn_gyro].align, left);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, lpos);
			if(show_gyrobutton, inc(lpos,40));

			set(layer[skin_btn_vr].align, left);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, lpos);
			if(show_vrbutton, inc(lpos,80));
		);

		copy(layer[skin_btn_hide].x, rpos);
		inc(rpos,40);

		copy(layer[skin_btn_fs].visible, show_fsbutton);
		copy(layer[skin_btn_fs].x, rpos);
		if(show_fsbutton, inc(rpos,40));
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////    SWITCHING SCENES     //////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_update_scene_infos">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0
			,
			<!-- Title -->
			if(skin_settings.title
				,
				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
		  	);

		  	<!-- Thumbnails -->
			if(skin_settings.thumbs_loop == false
				,
				if(scene[get(xml.scene)].index GT 0
					,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
				  	,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
			  	);

				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex
					,
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  	,
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
			  	);
			  	,
				if(scene.count GT 1
					,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  	,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
			  	);
		  	);

		  	<!-- More thumbnails -->
			txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
			if(layer[get(parentname)]
				,
				set(layer[skin_thumbborder].parent, get(parentname));
				set(layer[skin_thumbborder].visible, true);
			  	,
				set(layer[skin_thumbborder].visible, false);
			);
	  	);
	</action>

	<action name="skin_gotoscene">
		if(scene[%1]
			,
			copy(cursceneindex, scene[get(xml.scene)].index);
			copy(newsceneindex, scene[%1].index);
			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)));
	  	);
	</action>

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count
			,
			txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
			layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
			loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	  	);
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////    SHOW/HIDE SKIN     ///////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );
		if(layer[skin_gallery_picture], set(layer[skin_gallery_picture].visible,true); tween(layer[skin_gallery_picture].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>

	<action name="skin_hideskin">
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );
		if(layer[skin_gallery_picture], tween(layer[skin_gallery_picture].alpha, 0.0, 0.5, default, set(layer[skin_gallery_picture].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////     THUMBNAILS     //////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_addthumbs">
		if(skin_settings.thumbs == false
			,
			set(layer[skin_btn_thumbs].visible,false);
		  	,
			copy(thumbwidth, skin_settings.thumbs_width);
			copy(thumbheight, skin_settings.thumbs_height);
			copy(thumbpadding, skin_settings.thumbs_padding);
			copy(thumbcrop, skin_settings.thumbs_crop);

			add(thumbxoffset, thumbwidth, thumbpadding);
			mul(thumbxcenter, thumbxoffset, 0.5);
			<!-- Calculate how many scenes should be added to the thumbnail list -->
			set(actualThumbnails, 0);
			for(set(i,0), i LT scene.count, inc(i),
				if (scene[get(i)].thumburl !== null
					,
					add(actualThumbnails, 1);
				);
		    );
			mul(thumbbarwidth, thumbxoffset, actualThumbnails);
			add(thumbbarwidth, thumbpadding);
			add(thumbbarheight, thumbpadding, thumbheight);
			add(thumbbarheight, thumbpadding);

			if(skin_settings.thumbs_scrollindicator
				,
				copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
				add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
			);

			copy(layer[skin_thumbs].height, thumbbarheight);
			copy(layer[skin_thumbs].width, thumbbarwidth);

			mul(halfheight, thumbbarheight, 0.5);
			copy(layer[skin_thumbs_scrollleft].y, halfheight);
			copy(layer[skin_thumbs_scrollright].y, halfheight);

			set(thumb_cnt, 0);
			for(set(i,0), i LT scene.count, inc(i),
				if (scene[get(i)].thumburl !== null
					,
					inc(thumb_cnt);
					txtadd(thumbname,'skin_thumb_',get(i));
					addlayer(get(thumbname));
					copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
					set(layer[get(thumbname)].keep, true);
					set(layer[get(thumbname)].parent, 'skin_thumbs');
					set(layer[get(thumbname)].align, lefttop);
					copy(layer[get(thumbname)].crop, thumbcrop);
					copy(layer[get(thumbname)].width, thumbwidth);
					copy(layer[get(thumbname)].height, thumbheight);
					mul(thumbx, calc(thumb_cnt - 1), thumbxoffset);
					add(thumbx, thumbpadding);
					copy(layer[get(thumbname)].x, thumbx);
					copy(layer[get(thumbname)].y, thumbpadding);
					add(scene[get(i)].thumbx, thumbx, thumbxcenter);
					copy(scene[get(i)].thumby, thumbpadding);
					set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
					set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );
					if(skin_settings.tooltips_thumbs,
						set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
						layer[get(thumbname)].loadstyle(skin_tooltips);
				  	);
					if(skin_settings.thumbs_text,
						txtadd(thumbtext, 'skin_thumbtext_', get(i));
						addlayer(get(thumbtext));
						layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
						set(layer[get(thumbtext)].keep, true);
						set(layer[get(thumbtext)].parent, get(thumbname));
						set(layer[get(thumbtext)].html, get(scene[get(i)].title));
				  	);
				);
		    );

			if(thumb_cnt == 1,
				set(layer[skin_thumbs].align, 'lefttop');
			);
	  	);
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );

		if(show
			,
			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			skin_change_scroll_layer_height(layer[skin_thumbs].height);
		  	,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			skin_change_scroll_layer_height(0);
	  	);
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded
			,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
	  	);
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);

		if(skin_settings.thumbs_scrollbuttons
			,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
	  	);

		if(skin_settings.thumbs_scrollindicator
			,
			if(woverflow GT 0
				,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  	,
				set(layer[skin_thumbs_scrollindicator].visible,false);
		  	);
	  	);
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////    STYLE ACTIONS     ////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>

	<action name="skin_buttonglow">
		if('%1' !== 'null'
			,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 1.07);
		  	,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
				set(layer[skin_buttonglow].parent, null);
				set(layer[skin_buttonglow].visible, false);
		  	);
	  	);
	</action>

	<!--
	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////    HELPER FUNCTIONS    ////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	-->

	<!-- Helper function that expands the control bar upwards to fit content like thumbnails or a pop up map -->
	<action name="skin_change_scroll_layer_height">
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		add(mh, %1);
		add(mh, layer[skin_scroll_layer].y_offset);
		tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, %2);			
	</action>

	<action name="skin_calc_opened_closed">
		set(layer[get(name)].y_opened, get(layer[get(name)].y));
		set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
	</action>
</krpano>
